<!--  Current Configuration Guide -->
<chapter status="draft" id="configure"><title>Configuration Guide</title>
<section id="database"><title>Setting up your database</title>
<para>
The database backend is now a critical part of a functioning Current server.
Without this backend, you won't be able to server any packages, or even
register your clients.  Setting up the database is not difficult, but care
must be taken to not only ensure it's done correctly, but that it's done in a
way which won't compromise security.
</para>
<section id="postgres"><title>The PostgreSQL Backend</title>
<para>
There are two parts to setting up the PostgreSQL backend; first you have to
set up the PostgreSQL server itself to accept connections properly, then
you have to set up the actual database instance your Current server will use.
We'll address them in that order.
</para>
<para>
In order to set up the daemon, you have to first have an established
<filename>/var/lib/pgsql/data</filename> directory.  This is done by simply
starting the PostgreSQL daemon and immediately stopping it.  Then, you
have to configure the daemon to accept network (TCP/IP) connections.  This is
done by editing two files in the <filename>/var/lib/pgsql/data</filename>
directory, <filename>pg_hba.conf</filename> and
<filename>postmaster.opts.default</filename>.
</para>
<para>
The <filename>pg_hba.conf</filename> file configures the method(s) used
to authenticate connections to the PostgreSQL service; for Current to work,
we must allow host-based authentication, which is what is used for TCP/IP
connections.  The simplest way of doing this is to add a line to the
end of this file that reads:
<screen>
host    all     127.0.0.1   255.255.255.255     password
</screen>
This allowes host-based connections over TCP/IP from the local host only
(the loopback adapter, specifically) to all databases with a valid password
supplied.  For more details on what the fields in this line mean, please see
the PostgreSQL documentation.
</para>
<para>
The next file, <filename>postmaster.opts.default</filename>, simply tells the
startup script what options to pass to the postmaster daemon when the
PostgreSQL service is started.  Please be very careful to modify the
<filename>postmaster.opts.default</filename> file, even if there isn't one in
existence already - the <filename>postmaster.opts</filename> file simply
records what options the daemon was started with the last time it was started,
it does not control the options.
</para>
<para>
If you have any preexisting options in this file, you should keep them.  You
will have to add a <quote>-i</quote> to this file if it's not already there to
allow TCP/IP connections to the server.
</para>
<para>
Once you've modified those files, you can re-start the PosrgreSQL service and
create the user that the Current server will use to connect to the database.
This user and password must be the same username and password that appear in
your <filename>current.conf</filename> file.  The easiest way to create this
user account is to run the <command>createuser</command> script with the
<quote>-P</quote> option.  Please note that you must use a capital "P" -
the lowercase "p" is a different option and will cause unexpected behavior.
For more information on creating PostgreSQL users, please see the PostgreSQL
documentation.
</para>
<para>Now that we've allowed TCP/IP connections and created our user, we need
to create the database and tables that Current will use.  First, you need to
create and empty database with the <quote>createdb</quote> command provided
by the PostgreSQL package.  Once the empty database has been created, you will
create the actual tables that Current will use.  This step has been
simplified for you; all you need to do is run the <command>cinstall initdb</command>
command and the tables will be created automatically.  If you receive any error
messages, they should be somewhat explicit about what went wrong.  If you're
unable to correct the error, please ask on the mailing list.
</para>
</section>
<section id="pysqlite"><title>The PySQLite Backend</title>
<para>
This section will be fleshed out after Hunter has finished the development of
this backend.
</para>
</section>
</section> <!-- end of database section -->
<section id="server-common"><title>Common Server Configuration</title>
<para>
The first task in configuring Current is to configure to common (or global)
area of the server; this is the main section of the <filename>current.conf</filename> 
configuration file.  This configuration is fairly straightforward; you can start
with the example configuration file, and modify it to suit your needs.
</para>
<para>
The new configuration file is significantly shorter than in previous versions,
and there are no longer individual channel entries.  Instead, there are
database parameters which must be correct.  For specific information on what
each of the parameters means, please see the Glossary.
</para>
</section>
<section id="channel_config"><title>Channel Configuration</title>
<para>
As of versions after 1.5.2, Current no longer keeps channel configuration
information in the configuration file.  Channel configuration is kept in the 
database backend, and is manipulated through the <command>cadmin</command>
command; this will be covered in a later section of this manual.
</para>
</section>
<section id="apacheconfig"><title>Apache Configuration</title>
<para>
Now that all the channels are properly configured, we need to configure the
Apache server itself to handle registration and update requests.  This is where
Current can start causing problems in a production system, which is why we
strongly recommend you not try this on an active, production web server.
</para>
<para>
We're not going to go into a great deal of detail about Apache's configuration
file, <filename>httpd.conf</filename>, but we will touch on the sections of
that file that affect Current.  First, and most important, you must have the
mod_python module installed and functioning.  Since Current is written in
Python, for mod_python, not having it just doesn't make sense.  Secondly, you
must have SSL support enabled and functioning for your Apache server.
</para>
<para>
You should take note of where Apache expects to find the SSL server certificate
and key files; in Red Hat Linux 7.3, those locations are
<filename>/etc/httpd/conf/ssl.crt/server.crt</filename> for the server
certificate and <filename>/etc/httpd/conf/ssl.key/server.key</filename>
for the server key.  You will need to know these directories when you go to
generate the server certificate and key using <command>cadmin</command>.
</para>
<para>
This configuration step has been greatly simplified with the
<quote>create_apache_config</quote> command to <command>cinstall</command>, so
it no longer needs to be discussed in great detail.  You will need to ensure
that the directory hierarchy where the Current databases are kept, however, is
readable by the Apache process.  Please also note that you must edit the 
<filename>httpd.conf</filename> to include the file generated by the
above command, which defaults to <filename>current.httpd.conf</filename>.
</para>
<para>
Once you've completed all the above configuration steps, you should be able to
start the Apache server normally.  Once the channels are configured, the
database populated, and the clients properly configured, everything should 
Just Work(TM).  If it
doesn't work, or if anything in this documentation is unclear, please submit a
bug report / question to the mailing list.  Database creation, channel
configuration, database population, and client configuration will be
covered later.
</para>
</section>
<section id="postconfig"><title>Post-Configuration Initialization</title>
<para>
After completing the configuration, there are a few tasks which can't properly
be classified with channel instantiation / maintenance, but which are critical
to the operation of the server, so we'll discuss those tasks here.
</para>
<para>
The most critical of these tasks, by far, is creating the SSL key file and 
certificate file which will be used to encrypt communications between the
clients and the Current server.  To do this, first issue a <command>cadmin
create_certificate</command> command after installing Current.  This will
create several files in <filename>/etc/current</filename>, among them
<filename>current.pem</filename>, <filename>CURRENT-CA-CERT</filename>,
<filename>current.key</filename>, and <filename>current.crt</filename>.
</para>
<para>
The <filename>current.key</filename> and <filename>current.crt</filename>
must be copied to the <filename>/etc/httpd/conf/ssl.key</filename> and
<filename>/etc/httpd/conf/ssl.crt</filename> directories, respectively.  They
must also either be renamed, or the entries concerning these files must be
changes to the proper names in the <filename>httpd.conf</filename> file,
Apache's main configuration file.
</para>
<para>
IMPORTANT: This procedure will affect the SSL setup for your entire Apache
server, not just for Current.  
</para>
<para>
If you already have an existing SSL configuration working with your Apache
server, you can use that configuration to generate a CA-CERT file for use with
Current.  Simply copy the <filename>server.crt</filename> file from the
<filename>/etc/httpd/conf/ssl.crt</filename> directory to your current
working directory and issue the following two commands:
<screen>
# openssl x509 -noout -text -in server.crt > CURRENT-CA-CERT
# cat server.crt >> CURRENT-CA-CERT
</screen>
</para>
<para>
The <filename>CURRENT-CA-CERT</filename> must be copied to clients prior to
using Current; this will be discussed in the client section of this guide.
</para>
<para>
Also critical to operating a Current server is to issue a <command>cinstall
create_apache_config</command> command in order to create the Apache 
configuration snippet mentioned above; without this configuration snippet,
the Apache server will not know to invoke Current.
</para>
<para>
It is probably a good idea to configure the server to use 
<command>up2date</command> and Current to update itself as a client, as well.
To do this, simply perform all the configuration steps on the server that you 
would on a normal client; the client and server software bits are totally
disjoint and communicate only through XMLRPC calls, they do not step on
each other on the same system.
</para>
<para>
As of versions 1.5.x, the <command>cadmin</command> command family uses the
XML-RPC library supplied by Red Hat's up2date package in order to communicate
with the server rather than working totally independently.  This requires the
up2date configuration file in <filename>/etc/sysconfig/rhn/up2date</filename>
to be pointed at the actual Current server.  This implies two fairly
important changes to managing your server; first, you can now (if you so choose)
run <command>cadmin</command> from a machine other than the actual Current
server, assuming you copy the necessary executable over to the new machine,
and second, the machine that is running the <command>cadmin</command> command
must have it's up2date configuration file pointed at the Current server (as
above), and not at RHN.
</para>
</section>
</chapter>
